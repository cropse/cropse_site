<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Blog - python</title><link href="https://cropse.github.com/cropse_site/" rel="alternate"></link><link href="https://cropse.github.com/cropse_site/feeds/python.atom.xml" rel="self"></link><id>https://cropse.github.com/cropse_site/</id><updated>2017-03-24T11:39:49+08:00</updated><entry><title>Python iterator&amp;generator</title><link href="https://cropse.github.com/cropse_site/python-iteratorgenerator-.html" rel="alternate"></link><published>2017-03-24T11:39:49+08:00</published><updated>2017-03-24T11:39:49+08:00</updated><author><name>Cropse</name></author><id>tag:cropse.github.com,2017-03-24:/cropse_site/python-iteratorgenerator-.html</id><summary type="html"></summary><content type="html">&lt;p&gt;先講結論：&lt;br&gt;
Iterator 是透過一個class 內部宣告&lt;code&gt;__iter__&lt;/code&gt;還有&lt;code&gt;__next__&lt;/code&gt;(python2 是&lt;code&gt;next&lt;/code&gt;)方法來達成可迭代(iterable)的物件(class)&lt;br&gt;
Genetator 是透過yield簡單產生一個iterator的方法(method)&lt;/p&gt;
&lt;p&gt;這是一般的iterator&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stop&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__next__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;self.stop&lt;/span&gt;:
            &lt;span class="kt"&gt;raise&lt;/span&gt; &lt;span class="nx"&gt;StopIteration&lt;/span&gt;
        &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這是用generator產生的方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def generator(start,end):
    for i in range(start,end):
        yield i**2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://docs.python.org/3/tutorial/classes.html?#iterators"&gt;官方document這樣形容generators&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Generators are a simple and powerful tool for creating iterators&lt;/strong&gt;&lt;br&gt;
Anything that can be done with generators can also be done with class-based iterators as described in the previous section. What makes generators so compact is that the &lt;code&gt;__iter__()&lt;/code&gt;and &lt;code&gt;__next__()&lt;/code&gt; methods are created automatically.&lt;/p&gt;
&lt;p&gt;之後用法大致上都相同，都具備有&lt;a href="https://docs.python.org/3/glossary.html#term-iterable"&gt;&lt;strong&gt;iterable&lt;/strong&gt;的特性&lt;/a&gt;，雖然在用&lt;code&gt;list()&lt;/code&gt;的時候感覺很像，是因為list有&lt;strong&gt;iterable&lt;/strong&gt;的特性，但是iterator是用完就丟的概念，不能重複提取，好處是在處理時可以不用佔用到記憶體空間，像python2中xrange的用法&lt;/p&gt;</content><category term="python"></category></entry></feed>