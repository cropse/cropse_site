<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Blog - python</title><link href="http://www.cropse.com/" rel="alternate"></link><link href="http://www.cropse.com/feeds/python.atom.xml" rel="self"></link><id>http://www.cropse.com/</id><updated>2017-04-05T16:05:36+08:00</updated><entry><title>pelican紀錄</title><link href="http://www.cropse.com/pelican%E7%B4%80%E9%8C%84-.html" rel="alternate"></link><published>2017-04-05T16:05:36+08:00</published><updated>2017-04-05T16:05:36+08:00</updated><author><name>Cropse</name></author><id>tag:www.cropse.com,2017-04-05:/pelican紀錄-.html</id><summary type="html"></summary><content type="html">&lt;p&gt;這裡簡單紀錄一下pelican設定步驟，紀錄的很隨便，主要是給自己看的，因為整個主題跟功能大多是自己刻的，所以過程會相對複雜一點&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先做venv&lt;br&gt;
&lt;code&gt;python3.5 -m venv VENV&lt;/code&gt;&lt;br&gt;
&lt;code&gt;source VENV/bin/activate&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安裝套件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pelican
pip install Markdown
pip install ghp-import
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;快速設定&lt;br&gt;
&lt;code&gt;pelican-quickstart&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;建一個repository，這裡用gp-pages的方式，所以名稱自訂&lt;br&gt;
初始化一個git&lt;br&gt;
&lt;code&gt;git init&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git remote add origin {你的專案.git}&lt;/code&gt;&lt;br&gt;
之後使用&lt;code&gt;sh develop_server.sh start&lt;/code&gt;就可以執行&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;喜好設定&lt;/h2&gt;
&lt;p&gt;開啟&lt;em&gt;Makefile&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;改&lt;code&gt;GITHUB_PAGES_BRANCH=gh-pages&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;github: publish&lt;/code&gt;後面加入:&lt;br&gt;
&lt;code&gt;pelican content -o output -s publishconf.py&lt;/code&gt;&lt;br&gt;
這樣每次只要&lt;code&gt;make github&lt;/code&gt;，就會自動產生publish版本的到content，之後再推到github上&lt;/p&gt;
&lt;h2&gt;設定檔&lt;/h2&gt;
&lt;h3&gt;裝theme:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pelican-themes --install {theme_path}&lt;/code&gt;&lt;br&gt;
&lt;code&gt;-l&lt;/code&gt;:list theme installed&lt;br&gt;
&lt;em&gt;pelicanconf.py&lt;/em&gt;:&lt;br&gt;
&lt;code&gt;THEME = '{theme-name}'&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;markdown中使用extension&lt;/h3&gt;
&lt;ul class="checklist"&gt;
&lt;li&gt;&lt;input type="checkbox" disabled checked&gt; 想要加check-box&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;pip install markdown_checklist&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MARKDOWN = {
    &amp;#39;extension_configs&amp;#39;: {
        &amp;#39;markdown.extensions.codehilite&amp;#39;: {&amp;#39;css_class&amp;#39;: &amp;#39;highlight&amp;#39;},
        &amp;#39;markdown.extensions.extra&amp;#39;: {},
        &amp;#39;markdown.extensions.meta&amp;#39;: {},
        &amp;#39;markdown_checklist.extension&amp;#39;:{},
        &amp;#39;markdown.extensions.nl2br&amp;#39;:{},
    },
    &amp;#39;output_format&amp;#39;: &amp;#39;html5&amp;#39;,
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;增加參數在theme中可以直接使用&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MENUITEMS = [
    (&amp;#39;Home&amp;#39;, &amp;#39;/custom/about_me.html&amp;#39;),
    (&amp;#39;SoundCloud&amp;#39;, &amp;#39;/custom/soundcloud.html&amp;#39;),
    (&amp;#39;Blog&amp;#39;, &amp;#39;/&amp;#39;),
    ]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之後template中可以直接使用 {% for name,url in MENUITEMS %}&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.getpelican.com/en/stable/index.html"&gt;詳細參考&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;使用route53做DNS&lt;/h3&gt;
&lt;p&gt;在cropse.com上面設定A Type&lt;br&gt;
Value:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;192.30.252.153&lt;br&gt;
192.30.252.154&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在www.cropse.com裡面設定CNAME Type&lt;br&gt;
Value:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cropse.github.io&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之後在github增加一個CNAME檔&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;www.cropse.com&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是每次執行都會被覆蓋掉，所以在&lt;code&gt;makefile&lt;/code&gt; 修改ghp-import，增加-c參數&lt;br&gt;
&lt;code&gt;-c CNAME    Write a CNAME file with the given CNAME.&lt;/code&gt;&lt;br&gt;
這裡用我的網址www.cropse.com&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ghp-import -m "Generate Pelican site" -b $(GITHUB_PAGES_BRANCH) -c www.cropse.com $(OUTPUTDIR)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在github-&amp;gt;settings:&lt;br&gt;
會顯示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GitHub Pages&lt;br&gt;
Your site is published at http://www.cropse.com/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://kayakuguri.github.io/blog/2015/03/10/set-subdomain/"&gt;參考&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;sitemap for search engine&lt;/h3&gt;
&lt;p&gt;其實很簡單，只要Google search console 登陸之後，使用plugin sitemap&lt;br&gt;
就可以看到sitemap.xml，之後在&lt;strong&gt;檢索&lt;/strong&gt;-&amp;gt;&lt;strong&gt;Sitemap&lt;/strong&gt;增加該路徑即可&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pelican-plugins-master.sitemap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;

&lt;span class="n"&gt;SITEMAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;exclude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tag/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;category/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;format&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;priorities&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;articles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;indexes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;pages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;changefreqs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;articles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;monthly&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;indexes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;daily&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;pages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;monthly&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="funny"></category><category term="blog"></category><category term="github page"></category></entry><entry><title>用Docker取代python的venv</title><link href="http://www.cropse.com/%E7%94%A8docker%E5%8F%96%E4%BB%A3python%E7%9A%84venv-.html" rel="alternate"></link><published>2017-03-28T14:09:30+08:00</published><updated>2017-03-28T14:09:30+08:00</updated><author><name>Cropse</name></author><id>tag:www.cropse.com,2017-03-28:/用docker取代python的venv-.html</id><summary type="html"></summary><content type="html">&lt;p&gt;alpine&lt;/p&gt;
&lt;p&gt;apk update&lt;br&gt;
apk add python3&lt;/p&gt;</content><category term="docker"></category><category term="python"></category></entry><entry><title>Python iterator&amp;generator</title><link href="http://www.cropse.com/python-iteratorgenerator-.html" rel="alternate"></link><published>2017-03-24T11:39:49+08:00</published><updated>2017-03-24T11:39:49+08:00</updated><author><name>Cropse</name></author><id>tag:www.cropse.com,2017-03-24:/python-iteratorgenerator-.html</id><summary type="html"></summary><content type="html">&lt;p&gt;先講結論：&lt;br&gt;
Iterator 是透過一個class 內部宣告&lt;code&gt;__iter__&lt;/code&gt;還有&lt;code&gt;__next__&lt;/code&gt;(python2 是&lt;code&gt;next&lt;/code&gt;)方法來達成可迭代(iterable)的物件(class)&lt;br&gt;
Genetator 是透過yield簡單產生一個iterator的方法(method)&lt;/p&gt;
&lt;p&gt;這是一般的iterator&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stop&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__next__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;self.stop&lt;/span&gt;:
            &lt;span class="kt"&gt;raise&lt;/span&gt; &lt;span class="nx"&gt;StopIteration&lt;/span&gt;
        &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這是用generator產生的方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def generator(start,end):
    for i in range(start,end):
        yield i**2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://docs.python.org/3/tutorial/classes.html?#iterators"&gt;官方document這樣形容generators&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Generators are a simple and powerful tool for creating iterators&lt;/strong&gt;&lt;br&gt;
Anything that can be done with generators can also be done with class-based iterators as described in the previous section. What makes generators so compact is that the &lt;code&gt;__iter__()&lt;/code&gt;and &lt;code&gt;__next__()&lt;/code&gt; methods are created automatically.&lt;/p&gt;
&lt;p&gt;之後用法大致上都相同，都具備有&lt;a href="https://docs.python.org/3/glossary.html#term-iterable"&gt;&lt;strong&gt;iterable&lt;/strong&gt;的特性&lt;/a&gt;，雖然在用&lt;code&gt;list()&lt;/code&gt;的時候感覺很像，是因為list有&lt;strong&gt;iterable&lt;/strong&gt;的特性，但是iterator是用完就丟的概念，不能重複提取，好處是在處理時可以不用佔用到記憶體空間，像python2中xrange的用法&lt;/p&gt;</content><category term="python"></category></entry></feed>