<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Blog</title><link href="http://www.cropse.com/" rel="alternate"></link><link href="http://www.cropse.com/feeds/all.atom.xml" rel="self"></link><id>http://www.cropse.com/</id><updated>2017-04-05T16:05:36+08:00</updated><entry><title>pelican紀錄</title><link href="http://www.cropse.com/pelican%E7%B4%80%E9%8C%84-.html" rel="alternate"></link><published>2017-04-05T16:05:36+08:00</published><updated>2017-04-05T16:05:36+08:00</updated><author><name>Cropse</name></author><id>tag:www.cropse.com,2017-04-05:/pelican紀錄-.html</id><summary type="html"></summary><content type="html">&lt;p&gt;這裡簡單紀錄一下pelican設定步驟，紀錄的很隨便，主要是給自己看的，因為整個主題跟功能大多是自己刻的，所以過程會相對複雜一點&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先做venv&lt;br&gt;
&lt;code&gt;python3.5 -m venv VENV&lt;/code&gt;&lt;br&gt;
&lt;code&gt;source VENV/bin/activate&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;安裝套件&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;pip install pelican
pip install Markdown
pip install ghp-import
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;快速設定&lt;br&gt;
&lt;code&gt;pelican-quickstart&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;建一個repository，這裡用gp-pages的方式，所以名稱自訂&lt;br&gt;
初始化一個git&lt;br&gt;
&lt;code&gt;git init&lt;/code&gt;&lt;br&gt;
&lt;code&gt;git remote add origin {你的專案.git}&lt;/code&gt;&lt;br&gt;
之後使用&lt;code&gt;sh develop_server.sh start&lt;/code&gt;就可以執行&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;喜好設定&lt;/h2&gt;
&lt;p&gt;開啟&lt;em&gt;Makefile&lt;/em&gt;:&lt;/p&gt;
&lt;p&gt;改&lt;code&gt;GITHUB_PAGES_BRANCH=gh-pages&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;在&lt;code&gt;github: publish&lt;/code&gt;後面加入:&lt;br&gt;
&lt;code&gt;pelican content -o output -s publishconf.py&lt;/code&gt;&lt;br&gt;
這樣每次只要&lt;code&gt;make github&lt;/code&gt;，就會自動產生publish版本的到content，之後再推到github上&lt;/p&gt;
&lt;h2&gt;設定檔&lt;/h2&gt;
&lt;h3&gt;裝theme:&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;pelican-themes --install {theme_path}&lt;/code&gt;&lt;br&gt;
&lt;code&gt;-l&lt;/code&gt;:list theme installed&lt;br&gt;
&lt;em&gt;pelicanconf.py&lt;/em&gt;:&lt;br&gt;
&lt;code&gt;THEME = '{theme-name}'&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;markdown中使用extension&lt;/h3&gt;
&lt;ul class="checklist"&gt;
&lt;li&gt;&lt;input type="checkbox" disabled checked&gt; 想要加check-box&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;pip install markdown_checklist&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MARKDOWN = {
    &amp;#39;extension_configs&amp;#39;: {
        &amp;#39;markdown.extensions.codehilite&amp;#39;: {&amp;#39;css_class&amp;#39;: &amp;#39;highlight&amp;#39;},
        &amp;#39;markdown.extensions.extra&amp;#39;: {},
        &amp;#39;markdown.extensions.meta&amp;#39;: {},
        &amp;#39;markdown_checklist.extension&amp;#39;:{},
        &amp;#39;markdown.extensions.nl2br&amp;#39;:{},
    },
    &amp;#39;output_format&amp;#39;: &amp;#39;html5&amp;#39;,
}
&lt;/pre&gt;&lt;/div&gt;


&lt;h3&gt;增加參數在theme中可以直接使用&lt;/h3&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;MENUITEMS = [
    (&amp;#39;Home&amp;#39;, &amp;#39;/custom/about_me.html&amp;#39;),
    (&amp;#39;SoundCloud&amp;#39;, &amp;#39;/custom/soundcloud.html&amp;#39;),
    (&amp;#39;Blog&amp;#39;, &amp;#39;/&amp;#39;),
    ]
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;之後template中可以直接使用 {% for name,url in MENUITEMS %}&lt;/p&gt;
&lt;p&gt;&lt;a href="http://docs.getpelican.com/en/stable/index.html"&gt;詳細參考&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;使用route53做DNS&lt;/h3&gt;
&lt;p&gt;在cropse.com上面設定A Type&lt;br&gt;
Value:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;192.30.252.153&lt;br&gt;
192.30.252.154&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在www.cropse.com裡面設定CNAME Type&lt;br&gt;
Value:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;cropse.github.io&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;之後在github增加一個CNAME檔&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;www.cropse.com&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;但是每次執行都會被覆蓋掉，所以在&lt;code&gt;makefile&lt;/code&gt; 修改ghp-import，增加-c參數&lt;br&gt;
&lt;code&gt;-c CNAME    Write a CNAME file with the given CNAME.&lt;/code&gt;&lt;br&gt;
這裡用我的網址www.cropse.com&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;ghp-import -m "Generate Pelican site" -b $(GITHUB_PAGES_BRANCH) -c www.cropse.com $(OUTPUTDIR)&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;在github-&amp;gt;settings:&lt;br&gt;
會顯示：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;GitHub Pages&lt;br&gt;
Your site is published at http://www.cropse.com/&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href="http://kayakuguri.github.io/blog/2015/03/10/set-subdomain/"&gt;參考&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h3&gt;註冊google Search Console&lt;/h3&gt;
&lt;p&gt;新增一個網址路徑來確認，就只是在pelican增加一個網頁的路徑給google確認就好&lt;br&gt;
所以用客製化路徑的功能，我在&lt;code&gt;my-theme/template/custom/&lt;/code&gt;放上google給我的一個靜態檔案&lt;code&gt;googelxxxxxxxxxxxxx.html&lt;/code&gt;&lt;br&gt;
之後加入該參數在&lt;code&gt;pelicanconf.py&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;TEMPLATE_PAGES = {&lt;br&gt;
                  'custom/googelxxxxxxxxxxxxx.html': 'googelxxxxxxxxxxxxx.html'&lt;br&gt;
                  }&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;sitemap for search engine&lt;/h3&gt;
&lt;p&gt;其實很簡單，只要Google search console 登陸之後，使用plugin sitemap&lt;br&gt;
就可以看到sitemap.xml，上傳之後google search console&lt;strong&gt;檢索&lt;/strong&gt;-&amp;gt;&lt;strong&gt;Sitemap&lt;/strong&gt;上傳該路徑即可&lt;br&gt;
可以自己設定一下權重跟更新頻率&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;PLUGINS&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;pelican-plugins-master.sitemap&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,]&lt;/span&gt;

&lt;span class="n"&gt;SITEMAP&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;exclude&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;tag/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;category/&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;format&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;xml&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;priorities&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;articles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;indexes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;pages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mf"&gt;0.5&lt;/span&gt;
    &lt;span class="p"&gt;},&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;changefreqs&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;articles&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;monthly&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;indexes&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;daily&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;pages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;monthly&amp;#39;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;</content><category term="funny"></category><category term="blog"></category><category term="github page"></category></entry><entry><title>FreeNas 安裝紀錄</title><link href="http://www.cropse.com/FreeNas-.html" rel="alternate"></link><published>2017-04-05T15:30:18+08:00</published><updated>2017-04-05T15:30:18+08:00</updated><author><name>Cropse</name></author><id>tag:www.cropse.com,2017-04-05:/FreeNas-.html</id><summary type="html"></summary><content type="html">&lt;p&gt;這裡整理用FreeNas的一些心得&lt;/p&gt;
&lt;p&gt;用&lt;code&gt;?&lt;/code&gt;跟&lt;code&gt;help&lt;/code&gt;來查詢可用的指令，像是選單的方式&lt;br&gt;
所以如果要直接回到主選單直接敲&lt;code&gt;\&lt;/code&gt;就好，剩下基本上跟GUI操作會差不多&lt;br&gt;
EX: &lt;code&gt;network interface bridge2 delete&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;敲&lt;code&gt;shell&lt;/code&gt;直接進sh，在shell敲&lt;code&gt;cli&lt;/code&gt;回到FreeNas CLI，細節參考以下連結&lt;br&gt;
shell裡面使用cli:&lt;br&gt;
&lt;code&gt;cli -e "network interface show"&lt;/code&gt;&lt;br&gt;
同理在cli使用shell:&lt;br&gt;
&lt;code&gt;shell "ls -al"&lt;/code&gt;&lt;br&gt;
&lt;a href="http://www.freenas.org/blog/freenas-cli-preview/"&gt;FreeNas CLI&lt;/a&gt;&lt;br&gt;
&lt;a href="https://doc.freenas.org/9.3/freenas_cli.html#megacli"&gt;FreeNas utilties&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;有裝LSI的卡可以在shell裡面用&lt;code&gt;MegaCli&lt;/code&gt;指令，不過MSM這類的功能可能要自己刻，因為想要做一個硬碟有問題就寄信跟IFTTT通知我手機的功能，對FreeBSD跟MegaCli還不是太熟，所以有時間再嘗試看看&lt;br&gt;
&lt;strong&gt;更新&lt;/strong&gt;：FreeNas Corral暫時停止更新，踩雷停止。&lt;br&gt;
目前應該改玩Openmediavault，base on debian的系統相對開放一點，之後在另外整理一篇OMV的，前提是有心得的話。&lt;/p&gt;
&lt;p&gt;目前測試docker用GUI都還有點問題，等穩定一點在整理目前用的服務&lt;/p&gt;</content><category term="funny"></category></entry><entry><title>設定nginx proxy tls/ssl server</title><link href="http://www.cropse.com/%E8%A8%AD%E5%AE%9Anginx-proxy-tlsssl-server-.html" rel="alternate"></link><published>2017-03-30T11:13:12+08:00</published><updated>2017-03-30T11:13:12+08:00</updated><author><name>Cropse</name></author><id>tag:www.cropse.com,2017-03-30:/設定nginx-proxy-tlsssl-server-.html</id><summary type="html"></summary><content type="html">&lt;p&gt;http在資料傳遞過程中沒有進行加密的動作，所以有中間人擷取到敏感資料的問題，&lt;a href="https://zh.wikipedia.org/wiki/%E4%B8%AD%E9%97%B4%E4%BA%BA%E6%94%BB%E5%87%BB"&gt;中間人攻擊&lt;/a&gt;（Man-in-the-middle attack，縮寫：MITM），所以需要SSL跟TLS做加密的動作&lt;br&gt;
80是一般http通用接口，443是https的接口，所以其實只要在443port上加入ssl憑證就可以了&lt;br&gt;
Ref:&lt;a href="https://blog.gtwang.org/linux/nginx-create-and-install-ssl-certificate-on-ubuntu-linux/"&gt;NGINX 設定 HTTPS 網頁加密連線，建立自行簽署的 SSL 憑證&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用openssl產生ssl憑證&lt;br&gt;
&lt;code&gt;sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/nginx/ssl/nginx.key -out /etc/nginx/ssl/nginx.crt&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;req：使用 X.509 Certificate Signing Request（CSR） Management 產生憑證。&lt;/li&gt;
&lt;li&gt;-x509：建立自行簽署的憑證。&lt;/li&gt;
&lt;li&gt;-nodes：不要使用密碼保護，因為這個憑證是 NGINX 伺服器要使用的，如果設定密碼的話，會讓伺服器每次在啟動時書需要輸入密碼。&lt;/li&gt;
&lt;li&gt;-days 365：設定憑證的使用期限，單位是天，如果不想時常重新產生憑證，可以設長一點。&lt;/li&gt;
&lt;li&gt;-newkey rsa:2048：同時產生新的 RSA 2048 位元的金鑰。&lt;/li&gt;
&lt;li&gt;-keyout：設定金鑰儲存的位置。&lt;/li&gt;
&lt;li&gt;-out：設定憑證儲存的位置。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;依照順序填：&lt;br&gt;
1. 國家代碼，台灣就填 TW。&lt;br&gt;
2. 州或省，台灣就填 Taiwan。&lt;br&gt;
3. 城市，例如台北就填 Taipei。&lt;br&gt;
4. 公司名稱。&lt;br&gt;
5. 部門名稱。&lt;br&gt;
6. 伺服器的 FQDN，這個一定要填寫正確，如果沒有申請網域名稱的話，也可以用 IP 位址替代。&lt;br&gt;
7. E-mail 信箱。&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;server {
  # 加入 SSL 設定
  listen 443 ssl default_server;
  listen [::]:443 ssl default_server;

  # 憑證與金鑰的路徑
  ssl_certificate /etc/nginx/ssl/nginx.crt;
  ssl_certificate_key /etc/nginx/ssl/nginx.key;

  # .....
}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是有使用者從http連進來，所以需要從80轉到443，&lt;code&gt;permanent&lt;/code&gt;是http 301，讓瀏覽器重新訪問&lt;br&gt;
- permanent(301):永久性重新定向，對搜尋引擎友好&lt;br&gt;
- redirect(302):臨時性重新定向&lt;br&gt;
- last：将rewrite后的地址重新在server标签执行。&lt;br&gt;
- break：将rewrite后地址重新在当前的location标签执行。&lt;br&gt;
&lt;a href="http://www.netingcn.com/nginx-rewrite-flag.html"&gt;关于nginx rewrtie的四种flag&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
  &lt;span class="err"&gt;listen&lt;/span&gt; &lt;span class="err"&gt;80&lt;/span&gt; &lt;span class="err"&gt;default_server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
  &lt;span class="n"&gt;listen&lt;/span&gt; &lt;span class="cp"&gt;[&lt;/span&gt;&lt;span class="p"&gt;::&lt;/span&gt;&lt;span class="cp"&gt;]&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;80&lt;/span&gt; &lt;span class="n"&gt;default_server&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;

  &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;導向至&lt;/span&gt; &lt;span class="err"&gt;HTTPS&lt;/span&gt;
  &lt;span class="err"&gt;rewrite&lt;/span&gt; &lt;span class="err"&gt;^(.*)&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="n"&gt;host&lt;/span&gt;&lt;span class="err"&gt;$&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="n"&gt;permanent&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;但是ssl不會有憑證，需要跟發放憑證的供應商買，所以有&lt;strong&gt;Let's Encrypt&lt;/strong&gt;這家免費提供ssl的公司，&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.peterdavehello.org/2015/10/build-an-a-plus-best-practice-https-web-server-via-nginx-chinese-version/"&gt;用 nginx 建置一個 A+ 等級的 https 網頁伺服器&lt;/a&gt;&lt;/p&gt;</content><category term="nginx"></category><category term="deploy"></category></entry><entry><title>用Docker取代python的venv</title><link href="http://www.cropse.com/%E7%94%A8docker%E5%8F%96%E4%BB%A3python%E7%9A%84venv-.html" rel="alternate"></link><published>2017-03-28T14:09:30+08:00</published><updated>2017-03-28T14:09:30+08:00</updated><author><name>Cropse</name></author><id>tag:www.cropse.com,2017-03-28:/用docker取代python的venv-.html</id><summary type="html"></summary><content type="html">&lt;p&gt;alpine&lt;/p&gt;
&lt;p&gt;apk update&lt;br&gt;
apk add python3&lt;/p&gt;</content><category term="docker"></category><category term="python"></category></entry><entry><title>Docker cheat sheet</title><link href="http://www.cropse.com/docker-cheat-sheet-.html" rel="alternate"></link><published>2017-03-24T17:41:37+08:00</published><updated>2017-03-24T17:41:37+08:00</updated><author><name>Cropse</name></author><id>tag:www.cropse.com,2017-03-24:/docker-cheat-sheet-.html</id><summary type="html"></summary><content type="html">&lt;p&gt;這是我自己整理的docker cheatsheet，總之就是一邊用一邊更新自己使用過的指令&lt;/p&gt;
&lt;p&gt;Useage:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;docker [option] {Command}
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;背景執行請用 -it -d, 這樣後面就可以用logs去查背景輸出&lt;/p&gt;
&lt;p&gt;Command:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;inspect&lt;/code&gt; &lt;code&gt;{container_id}&lt;/code&gt; looking for detail , json form&lt;/li&gt;
&lt;li&gt;&lt;code&gt;logs&lt;/code&gt; &lt;code&gt;{container_id}&lt;/code&gt; inquery process log in background&lt;/li&gt;
&lt;li&gt;&lt;code&gt;ps&lt;/code&gt; inquery running container&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-a&lt;/code&gt; : all container, according terminated &lt;/li&gt;
&lt;li&gt;&lt;code&gt;-q&lt;/code&gt; : only inquery id&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;images&lt;/code&gt; check image&lt;ul&gt;
&lt;li&gt;&lt;code&gt;-q&lt;/code&gt; : only id&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;code&gt;commit&lt;/code&gt; &lt;code&gt;{container_id}&lt;/code&gt; &lt;code&gt;{repository_name:tag}&lt;/code&gt; &lt;/li&gt;
&lt;li&gt;&lt;code&gt;build&lt;/code&gt; build Dockerfile&lt;br&gt;
&lt;code&gt;-t&lt;/code&gt; &lt;code&gt;{Tag name}&lt;/code&gt; : add Tag&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rm&lt;/code&gt; delete container &lt;/li&gt;
&lt;li&gt;&lt;code&gt;login&lt;/code&gt; login docker registry to be ready to push&lt;/li&gt;
&lt;li&gt;&lt;code&gt;rmi&lt;/code&gt; delete image&lt;/li&gt;
&lt;li&gt;run: run docker container from images&lt;ul&gt;
&lt;li&gt;-i interactive mode&lt;/li&gt;
&lt;li&gt;-t pseudo TTY mode&lt;/li&gt;
&lt;li&gt;-d background mode&lt;/li&gt;
&lt;li&gt;-p {local host port}:{container vps port} porting mapping&lt;/li&gt;
&lt;li&gt;-v {Absolute local path}:{Absolute container path} mount volume&lt;/li&gt;
&lt;li&gt;-p {host port}:{container port} port forward&lt;/li&gt;
&lt;li&gt;-v {host_path}:{container_path} mount volume from host&lt;ul&gt;
&lt;li&gt;掛上volume之後因為SELinux的原因，預設都是read-only，所以&lt;code&gt;{host_path}:{container_path}:Z&lt;/code&gt;就可以給這個container使用，使用小寫&lt;code&gt;z&lt;/code&gt;則是給多個container使用&lt;br&gt;
&lt;a href="http://www.projectatomic.io/blog/2015/06/using-volumes-with-docker-can-cause-problems-with-selinux/"&gt;Using Volumes with Docker can Cause Problems with SELinux&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;example:&lt;br&gt;
&lt;code&gt;docker build --tag aiohttp:0.1 .&lt;/code&gt;&lt;br&gt;
&lt;code&gt;docker run -it -p 9898:80 -v $(pwd)/example:/run aiohttp:0.1 bash&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;docker exec -it {container} {command}&lt;/code&gt;: 繼續執行command&lt;ul&gt;
&lt;li&gt;ex:&lt;code&gt;docker exec -it test ps aux&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;Delete all containers&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;docker rm $(docker ps -a -q)&lt;/code&gt; &lt;br&gt;
&lt;strong&gt;Delete all images&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;docker rmi $(docker images -a -q)&lt;/code&gt; &lt;br&gt;
&lt;strong&gt;Login to running container&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;docker exec -it {container_id} bash&lt;/code&gt; &lt;br&gt;
&lt;strong&gt;delete all volume not used&lt;/strong&gt;&lt;br&gt;
&lt;code&gt;docker volume rm $(docker volume ls -f 'dangling=true' -q)&lt;/code&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;Dokcer Save&amp;amp;Export&lt;/h2&gt;
&lt;p&gt;可以打包container，打包後直接丟給別人&lt;/p&gt;
&lt;h3&gt;先講結論：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;export: 打包container出來，image會被合併成一包，使用import匯入&lt;/li&gt;
&lt;li&gt;save: 把container的紀錄給保存下來，會保留image的安裝紀錄，安裝也是批次安裝，使用load匯入&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;使用方法：&lt;/h3&gt;
&lt;h4&gt;export&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;docker export &lt;code&gt;{container_id}&lt;/code&gt; &amp;gt; export.tar&lt;/li&gt;
&lt;li&gt;cat export.tar | sudo docker import - &lt;code&gt;{repository_name:tag}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;save&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;docker save &lt;code&gt;{container_id}&lt;/code&gt; &amp;gt; save.tar&lt;/li&gt;
&lt;li&gt;docker load &amp;lt; save.tar&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;h2&gt;Dockerfile&lt;/h2&gt;
&lt;p&gt;&lt;code&gt;FROM&lt;/code&gt; &lt;code&gt;{OS}&lt;/code&gt; &lt;br&gt;
&lt;code&gt;RUN&lt;/code&gt; &lt;code&gt;{shell_command}&lt;/code&gt; command on build image&lt;br&gt;
&lt;code&gt;CMD&lt;/code&gt; &lt;code&gt;{shell_command}&lt;/code&gt; command after container build&lt;br&gt;
&lt;code&gt;COPY&lt;/code&gt; &lt;code&gt;{localfile_path}&lt;/code&gt; &lt;code&gt;{container_path}&lt;/code&gt; cp指令&lt;br&gt;
&lt;code&gt;ADD&lt;/code&gt; 類似wget之類的透過URL下載，可以自動解壓縮，但是非必要建議COPY&lt;br&gt;
&lt;code&gt;ENV {key} {value}&lt;/code&gt; set the enveriment&lt;br&gt;
&lt;code&gt;WORKDIR /path/to/workdir&lt;/code&gt; set Working dir&lt;br&gt;
&lt;code&gt;EXPOSE {local host port} {container vps port}&lt;/code&gt; 需要加-P才會生效&lt;br&gt;
&lt;a href="https://chnbohwr.myds.me/wordpress/?p=353"&gt;Dockerfile 解說&lt;/a&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;h1&gt;Docker Compose Commands&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;docker compose up&lt;/code&gt; starts up all the containers. &lt;br&gt;
&lt;code&gt;docker compose ps&lt;/code&gt; checks the status of the containers managed by docker compose. &lt;br&gt;
&lt;code&gt;docker compose logs&lt;/code&gt; outputs colored and aggregated logs for the compose-managed &lt;br&gt;
containers. &lt;br&gt;
&lt;code&gt;docker compose logs&lt;/code&gt;  &lt;code&gt;-f&lt;/code&gt; outputs appended log when the log grows. &lt;br&gt;
&lt;code&gt;docker compose logs&lt;/code&gt; &lt;code&gt;{container name}&lt;/code&gt; in the end outputs the logs of a specific &lt;br&gt;
container. &lt;br&gt;
&lt;code&gt;docker compose stop&lt;/code&gt; stops all the running containers without removing them. &lt;br&gt;
&lt;code&gt;docker compose rm&lt;/code&gt; removes all the containers.&lt;br&gt;
&lt;code&gt;docker compose build&lt;/code&gt; rebuilds all the images.&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Docker-compose 不需要做link，內部的port根據services名稱方便管理跟開關功能&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h1&gt;Note&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;alpine交互指令用bin/sh而不是bin/bash&lt;/li&gt;
&lt;/ul&gt;
&lt;h1&gt;Vloume&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;Volume 在dokcerfile無法指定local path&lt;/em&gt;&lt;/strong&gt;&lt;br&gt;
指定local path會把container path的資料清空，需要注意一下&lt;/p&gt;
&lt;p&gt;&lt;a href="http://dockone.io/article/128"&gt;深入理解Docker Volume（一）&lt;/a&gt;&lt;br&gt;
&lt;a href="http://julianchu.net/2016/04/19-docker.html"&gt;Docker volume 簡單用法&lt;/a&gt;&lt;/p&gt;</content><category term="docker"></category></entry><entry><title>Python iterator&amp;generator</title><link href="http://www.cropse.com/python-iteratorgenerator-.html" rel="alternate"></link><published>2017-03-24T11:39:49+08:00</published><updated>2017-03-24T11:39:49+08:00</updated><author><name>Cropse</name></author><id>tag:www.cropse.com,2017-03-24:/python-iteratorgenerator-.html</id><summary type="html"></summary><content type="html">&lt;p&gt;先講結論：&lt;br&gt;
Iterator 是透過一個class 內部宣告&lt;code&gt;__iter__&lt;/code&gt;還有&lt;code&gt;__next__&lt;/code&gt;(python2 是&lt;code&gt;next&lt;/code&gt;)方法來達成可迭代(iterable)的物件(class)&lt;br&gt;
Genetator 是透過yield簡單產生一個iterator的方法(method)&lt;/p&gt;
&lt;p&gt;這是一般的iterator&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kr"&gt;class&lt;/span&gt; &lt;span class="nx"&gt;iterator&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;object&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__init__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="nx"&gt;stop&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;start&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;stop&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;stop&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__iter__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;
    &lt;span class="nx"&gt;def&lt;/span&gt; &lt;span class="nx"&gt;__next__&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;&amp;gt;=&lt;/span&gt; &lt;span class="nx"&gt;self.stop&lt;/span&gt;:
            &lt;span class="kt"&gt;raise&lt;/span&gt; &lt;span class="nx"&gt;StopIteration&lt;/span&gt;
        &lt;span class="nx"&gt;current&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;
        &lt;span class="nx"&gt;self&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;start&lt;/span&gt; &lt;span class="o"&gt;+=&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="nx"&gt;current&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這是用generator產生的方法&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;def generator(start,end):
    for i in range(start,end):
        yield i**2
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;a href="https://docs.python.org/3/tutorial/classes.html?#iterators"&gt;官方document這樣形容generators&lt;/a&gt;&lt;br&gt;
&lt;strong&gt;Generators are a simple and powerful tool for creating iterators&lt;/strong&gt;&lt;br&gt;
Anything that can be done with generators can also be done with class-based iterators as described in the previous section. What makes generators so compact is that the &lt;code&gt;__iter__()&lt;/code&gt;and &lt;code&gt;__next__()&lt;/code&gt; methods are created automatically.&lt;/p&gt;
&lt;p&gt;之後用法大致上都相同，都具備有&lt;a href="https://docs.python.org/3/glossary.html#term-iterable"&gt;&lt;strong&gt;iterable&lt;/strong&gt;的特性&lt;/a&gt;，雖然在用&lt;code&gt;list()&lt;/code&gt;的時候感覺很像，是因為list有&lt;strong&gt;iterable&lt;/strong&gt;的特性，但是iterator是用完就丟的概念，不能重複提取，好處是在處理時可以不用佔用到記憶體空間，像python2中xrange的用法&lt;/p&gt;</content><category term="python"></category></entry><entry><title>Circleci範例紀錄</title><link href="http://www.cropse.com/circleci%E7%AF%84%E4%BE%8B%E7%B4%80%E9%8C%84-.html" rel="alternate"></link><published>2017-02-20T14:40:04+08:00</published><updated>2017-02-20T14:40:04+08:00</updated><author><name>Cropse</name></author><id>tag:www.cropse.com,2017-02-20:/circleci範例紀錄-.html</id><summary type="html"></summary><content type="html">&lt;p&gt;這裡記錄使用Django_blog 在github每次push時使用circleci跑一次測試，circleci只使用一個專案不用錢(測試時間還是有限制)&lt;br&gt;
基本上只要用circleci連結到你github的專案，專案有circle.yml就會在每次push時自動跑一次測試&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;circle.yml&lt;/strong&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;dependencies&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="kd"&gt;override&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;apt&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="kd"&gt;get&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="n"&gt;build&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;essential&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;setuptools&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;y&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pyenv&lt;/span&gt; &lt;span class="n"&gt;global&lt;/span&gt; &lt;span class="mf"&gt;3.6&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;pip3&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;$HOME&lt;/span&gt;&lt;span class="sr"&gt;/Django_Blog/&lt;/span&gt;&lt;span class="n"&gt;requirement_ci&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;txt&lt;/span&gt;

        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;geckodriver&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;wget&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="o"&gt;://&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;com&lt;/span&gt;&lt;span class="sr"&gt;/mozilla/geckodriver/releases/download/v0.14.0/g&lt;/span&gt;&lt;span class="n"&gt;eckodriver&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;14.0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;linux64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gz&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;tar&lt;/span&gt; &lt;span class="n"&gt;zxf&lt;/span&gt; &lt;span class="n"&gt;geckodriver&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;v0&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="mf"&gt;14.0&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;linux64&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;tar&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;gz&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;chmod&lt;/span&gt; &lt;span class="mi"&gt;755&lt;/span&gt; &lt;span class="n"&gt;geckodriver&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;cp&lt;/span&gt; &lt;span class="n"&gt;geckodriver&lt;/span&gt; &lt;span class="sr"&gt;/usr/local/bin/&lt;/span&gt;
&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
    &lt;span class="kd"&gt;override&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="n"&gt;$HOME&lt;/span&gt;&lt;span class="sr"&gt;/Django_Blog/src/&lt;/span&gt;&lt;span class="n"&gt;manage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;py&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;posts&lt;/span&gt;
        &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="n"&gt;$HOME&lt;/span&gt;&lt;span class="sr"&gt;/Django_Blog/src/&lt;/span&gt;&lt;span class="n"&gt;manage&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="na"&gt;py&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt; &lt;span class="n"&gt;pages&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;這裡注意到幾點&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://askubuntu.com/questions/870530/how-to-install-geckodriver-in-ubuntu"&gt;selenium的geckodriver問題&lt;/a&gt;，所以寫起來有點長&lt;/li&gt;
&lt;li&gt;Django test 需要指定app 測試，不然不會跑&lt;/li&gt;
&lt;li&gt;python3有很多版本，所以需要&lt;code&gt;pyenv global 3.6.0&lt;/code&gt; 做指定&lt;/li&gt;
&lt;li&gt;可以rebuild with SSH, 跑完最後會有一組ssh讓你連進去debug&lt;/li&gt;
&lt;li&gt;連進去在$HOME 的路徑下，所以寫config記得加該路徑&lt;/li&gt;
&lt;li&gt;requirement另外寫一個，因為deploy不用selenium，測試端也不用uwsgi或是nginx&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Docker版本的之後再寫，先把docker-compose寫完再說&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Reference link&lt;/strong&gt;&lt;br&gt;
&lt;a href="https://circleci.com/docs/configuration/"&gt;Docs&lt;/a&gt;&lt;br&gt;
&lt;a href="https://samkuo.me/post/2015/10/eavatar-circleci-continuous-integration/"&gt;山姆大的教學&lt;/a&gt;&lt;br&gt;
&lt;a href="http://blog.amowu.com/2015/04/devops-continuous-integration-delivery-docker-circleci-aws-beanstalk.html"&gt;DevOps：持續整合＆持續交付（Docker、CircleCI、AWS）&lt;/a&gt;&lt;/p&gt;</content><category term="CI/CD"></category><category term="selenium"></category><category term="testcase"></category><category term="deploy"></category></entry><entry><title>Selenium 試玩心得</title><link href="http://www.cropse.com/selenium-%E8%A9%A6%E7%8E%A9%E5%BF%83%E5%BE%97-.html" rel="alternate"></link><published>2017-02-18T15:42:57+08:00</published><updated>2017-02-18T15:42:57+08:00</updated><author><name>Cropse</name></author><id>tag:www.cropse.com,2017-02-18:/selenium-試玩心得-.html</id><summary type="html"></summary><content type="html">&lt;p&gt;簡單紀錄一下有遇到的問題：&lt;/p&gt;
&lt;h4&gt;遇到這個Error log&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;Unexpected Exception: Error: cross-process JS call failed.&lt;/code&gt;&lt;br&gt;
&lt;a href="https://addons.mozilla.org/en-US/firefox/addon/flow-control/?src=dp-dl-othersby"&gt;安裝這個插件&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;安裝geckodriver&lt;/h3&gt;
&lt;p&gt;另外需要安裝geckodriver才能從執行，不然會有error&lt;br&gt;
&lt;code&gt;selenium.common.exceptions.WebDriverException: Message: 'geckodriver' executable needs to be in PATH.&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;https://github.com/mozilla/geckodriver/releases&lt;/p&gt;
&lt;p&gt;&lt;code&gt;echo $PATH&lt;/code&gt; 看一下執行路徑&lt;br&gt;
把下載下來的執行檔丟進路徑內(我丟進&lt;code&gt;usr/local/bin&lt;/code&gt; on OSX)&lt;/p&gt;
&lt;h3&gt;plugin&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;Selenium Expert (Selenium IDE)&lt;/li&gt;
&lt;li&gt;Selenium IDE&lt;/li&gt;
&lt;li&gt;Selenium IDE Button&lt;/li&gt;
&lt;li&gt;Selenium IDE: Flow Control&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最後記得安裝seletinum&lt;br&gt;
&lt;code&gt;pip install seletinum&lt;/code&gt;&lt;/p&gt;
&lt;h3&gt;開始使用&lt;/h3&gt;
&lt;p&gt;因為自己測試發現後續更新有些不一樣，這裡測試環境都是OSX，所以前置有踩一點小雷&lt;br&gt;
操作方式參考以下&lt;br&gt;
&lt;a href="https://seleniumhq.github.io/selenium/docs/api/py/index.html#introduction"&gt;documentation&lt;/a&gt;&lt;br&gt;
&lt;a href="http://ithelp.ithome.com.tw/articles/10108684"&gt;CI Server 23 - 使用Selenium進行瀏覽器自動化測試&lt;/a&gt;&lt;br&gt;
&lt;a href="https://www.youtube.com/watch?v=MQH4Rau_F_A"&gt;如何使用 Selenium 以及 Python 輕鬆抓取 Agoda 的旅館資訊?&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;最後IDE可以直接產生unittest，只支援python2，但是實際上簡單的測試用python3也可以直接跑&lt;/p&gt;</content><category term="testcase"></category><category term="selenium"></category></entry><entry><title>Deploy設定簡單紀錄</title><link href="http://www.cropse.com/deploy%E8%A8%AD%E5%AE%9A%E7%B0%A1%E5%96%AE%E7%B4%80%E9%8C%84-.html" rel="alternate"></link><published>2017-02-07T17:40:05+08:00</published><updated>2017-02-07T17:40:05+08:00</updated><author><name>Cropse</name></author><id>tag:www.cropse.com,2017-02-07:/deploy設定簡單紀錄-.html</id><summary type="html"></summary><content type="html">&lt;p&gt;這裡大概整理一下整個網站deploy的過程,等下次在詳細整理s3跟ec2設定的部分&lt;/p&gt;
&lt;p&gt;django專案名稱是&lt;strong&gt;src&lt;/strong&gt;, 路徑放置在&lt;strong&gt;/home/ubuntu/blog&lt;/strong&gt;&lt;br&gt;
先從配置文件開始&lt;br&gt;
首先新增一個&lt;code&gt;production.py&lt;/code&gt;在/home/ubuntu/blog/setting/&lt;br&gt;
以下內容：&lt;/p&gt;
&lt;hr&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;.base&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;

&lt;span class="c1"&gt;# SECURITY WARNING: keep the secret key used in production secret!&lt;/span&gt;
&lt;span class="c1"&gt;# 請自己新增一個 不要直接用 http://www.miniwebtool.com/django-secret-key-generator/&lt;/span&gt;
&lt;span class="n"&gt;SECRET_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;-we5#2la2p=%tj1#w6t(3dgh#1=f8!tx#tmy7khui2yw1$&lt;/span&gt;&lt;span class="si"&gt;%g&lt;/span&gt;&lt;span class="s1"&gt;32&amp;#39;&lt;/span&gt;

&lt;span class="c1"&gt;# SECURITY WARNING: don&amp;#39;t run with debug turned on in production!&lt;/span&gt;
&lt;span class="n"&gt;DEBUG&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

&lt;span class="c1"&gt;# 這邊填上網址允許&lt;/span&gt;
&lt;span class="n"&gt;ALLOWED_HOSTS&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="c1"&gt;# 選擇你的db, 這裡用postgresql&lt;/span&gt;
&lt;span class="n"&gt;DATABASES&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;default&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;ENGINE&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;django.db.backends.postgresql_psycopg2&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;NAME&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;USER&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;PASSWORD&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;HOST&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
        &lt;span class="s1"&gt;&amp;#39;PORT&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;5432&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="c1"&gt;# S3 設定用&lt;/span&gt;
&lt;span class="n"&gt;INSTALLED_APPS&lt;/span&gt;&lt;span class="o"&gt;+=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;
    &lt;span class="s1"&gt;&amp;#39;storages&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
&lt;span class="p"&gt;]&lt;/span&gt;


&lt;span class="n"&gt;STATICFILES_STORAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;storages.backends.s3boto3.S3Boto3Storage&amp;#39;&lt;/span&gt;

&lt;span class="n"&gt;AWS_REGION&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;ap-northeast-1&amp;quot;&lt;/span&gt;
&lt;span class="n"&gt;AWS_QUERYSTRING_AUTH&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="n"&gt;AWS_ACCESS_KEY_ID&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;&amp;lt;b&amp;gt;tag&amp;lt;/b&amp;gt;&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;AWS_SECRET_ACCESS_KEY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;your access Key&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;AWS_STORAGE_BUCKET_NAME&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;your s3 bucket name&amp;#39;&lt;/span&gt;
&lt;span class="n"&gt;MEDIA_URL&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;http://&lt;/span&gt;&lt;span class="si"&gt;%s&lt;/span&gt;&lt;span class="s1"&gt;.s3.amazonaws.com/media/&amp;#39;&lt;/span&gt; &lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;AWS_STORAGE_BUCKET_NAME&lt;/span&gt;
&lt;span class="n"&gt;DEFAULT_FILE_STORAGE&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;storages.backends.s3boto3.S3Boto3Storage&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h1&gt;設定ec2伺服器&lt;/h1&gt;
&lt;p&gt;在ec2上面開一個ubuntu&lt;br&gt;
連線後開始安裝套件, 這裡路徑是/home/ubuntu/blog&lt;/p&gt;
&lt;table class="highlighttable"&gt;&lt;tr&gt;&lt;td class="linenos"&gt;&lt;div class="linenodiv"&gt;&lt;pre&gt; 1
 2
 3
 4
 5
 6
 7
 8
 9
10
11
12
13
14
15
16&lt;/pre&gt;&lt;/div&gt;&lt;/td&gt;&lt;td class="code"&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="ch"&gt;#!/bin/bash&lt;/span&gt;

&lt;span class="c1"&gt;# source /home/debian/VENV/bin/activate&lt;/span&gt;
&lt;span class="c1"&gt;# 先安裝套件&lt;/span&gt;
apt-get update -y
apt-get upgrade -y
apt-get install  nginx uwsgi python3 build-essential python3-dev python3-setuptools python3-pip -y
apt-get install uwsgi-plugin-python3 -y
apt-get install libpq-dev -y
apt-get install postgresql postgresql-contrib -y

apt install awscli -y
pip3 install uwsgi

&lt;span class="c1"&gt;# application import, 如果專案放github請用git clone&lt;/span&gt;
aws s3 cp s3://cropse/Blog/ /home/ubuntu/blog --recursive
&lt;/pre&gt;&lt;/div&gt;
&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;

&lt;p&gt;&lt;a href="https://ssorc.tw/242"&gt;PostgreSQL指令集&lt;/a&gt;&lt;br&gt;
&lt;a href="http://lolikitty.pixnet.net/blog/post/28167655-postgresql-%E6%8C%87%E4%BB%A4"&gt;PostgreSQL 指令&lt;/a&gt;&lt;br&gt;
&lt;a href="http://ching119.pixnet.net/blog/post/63697343-%E3%80%90%E7%B3%BB%E7%B5%B1%E3%80%91postgresql-%3A-%E8%A8%98%E9%8C%84%E4%B8%80%E4%BA%9B%E8%A8%AD%E5%AE%9A%E5%92%8C%E6%8C%87%E4%BB%A4"&gt;【系統】PostgreSQL : 記錄一些設定和指令&lt;/a&gt;&lt;/p&gt;
&lt;h1&gt;設定nginx&lt;/h1&gt;
&lt;p&gt;接下來設定nginx,剛裝完之後可以直接開80 port檢查demo網頁確認運作正常&lt;br&gt;
這邊用sock的方式對伺服器做存取而不是設定port&lt;br&gt;
檔案名稱&lt;code&gt;default&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nt"&gt;upstream&lt;/span&gt; &lt;span class="nt"&gt;django&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;server&lt;/span&gt; &lt;span class="n"&gt;unix&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;///&lt;/span&gt;&lt;span class="n"&gt;var&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;www&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;demo&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sock&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="nt"&gt;server&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
    &lt;span class="err"&gt;listen&lt;/span&gt; &lt;span class="err"&gt;80&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;server_name&lt;/span&gt; &lt;span class="err"&gt;52.68.0.97&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;charset&lt;/span&gt; &lt;span class="err"&gt;utf-8&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="err"&gt;client_max_body_size&lt;/span&gt; &lt;span class="err"&gt;20M&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;


    &lt;span class="err"&gt;location&lt;/span&gt; &lt;span class="err"&gt;/static&lt;/span&gt; &lt;span class="err"&gt;{&lt;/span&gt;
          &lt;span class="err"&gt;alias&lt;/span&gt; &lt;span class="err"&gt;/home/ubuntu/blog/static_cdn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;   &lt;span class="nt"&gt;setting&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;media&lt;/span&gt; &lt;span class="nt"&gt;and&lt;/span&gt; &lt;span class="nt"&gt;static&lt;/span&gt; &lt;span class="nt"&gt;in&lt;/span&gt; &lt;span class="nt"&gt;local&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;    &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;static&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;          &lt;span class="err"&gt;alias&lt;/span&gt; &lt;span class="err"&gt;/home/ubuntu/blog/static_cdn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;#&lt;/span&gt;    &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nt"&gt;media&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;          &lt;span class="err"&gt;alias&lt;/span&gt; &lt;span class="err"&gt;/home/ubuntu/blog/media_cdn&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="err"&gt;#&lt;/span&gt;    &lt;span class="p"&gt;}&lt;/span&gt;


    &lt;span class="nt"&gt;location&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;
        &lt;span class="err"&gt;uwsgi_pass&lt;/span&gt; &lt;span class="err"&gt;django&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;#&lt;/span&gt; &lt;span class="err"&gt;uwsgi_pass&lt;/span&gt; &lt;span class="err"&gt;127.0.0.1:8080&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
        &lt;span class="err"&gt;include&lt;/span&gt; &lt;span class="err"&gt;/etc/nginx/uwsgi_params&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
    &lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="err"&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;接下來設定uwsgi,注意專案名稱跟路徑&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;uwsgi.ini&lt;/code&gt;&lt;br&gt;
可以用'uwsgi -i uwsgi.ini'先開啟測試&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[uwsgi]&lt;/span&gt;
&lt;span class="na"&gt;chdir&lt;/span&gt;        &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/home/ubuntu/blog/src&lt;/span&gt;
&lt;span class="c1"&gt;# Django&amp;#39;s wsgi file&lt;/span&gt;
&lt;span class="na"&gt;module&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;src.wsgi:application&lt;/span&gt;
&lt;span class="na"&gt;env&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;DJANGO_SETTINGS_MODULE=src.settings.production&lt;/span&gt;
&lt;span class="c1"&gt;#.production&lt;/span&gt;
&lt;span class="c1"&gt;# the virtualenv (full path)&lt;/span&gt;
&lt;span class="c1"&gt;# home         = /home/debian/VENV&lt;/span&gt;
&lt;span class="c1"&gt;# home         = /usr/bin&lt;/span&gt;

&lt;span class="c1"&gt;# process-related settings&lt;/span&gt;
&lt;span class="c1"&gt;# master&lt;/span&gt;
&lt;span class="na"&gt;master&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;span class="c1"&gt;# maximum number of worker processes&lt;/span&gt;
&lt;span class="na"&gt;processes&lt;/span&gt;    &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;4&lt;/span&gt;
&lt;span class="c1"&gt;# the socket (use the full path to be safe&lt;/span&gt;
&lt;span class="na"&gt;socket&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;/var/www/demo.sock&lt;/span&gt;
&lt;span class="c1"&gt;# ... with appropriate permissions - may be needed&lt;/span&gt;
&lt;span class="na"&gt;chmod-socket&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;777&lt;/span&gt;
&lt;span class="na"&gt;uid&lt;/span&gt;          &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;root&lt;/span&gt;
&lt;span class="c1"&gt;# gid          = 0&lt;/span&gt;
&lt;span class="c1"&gt;# clear environment on exit&lt;/span&gt;
&lt;span class="na"&gt;vacuum&lt;/span&gt;       &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;true&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;hr&gt;
&lt;h1&gt;寫好uwsgi的service&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://www.ruanyifeng.com/blog/2016/03/systemd-tutorial-commands.html"&gt;Systemd 入门教程：命令篇&lt;/a&gt;&lt;br&gt;
&lt;a href="http://felix-lin.com/linux/init%E6%BC%94%E5%8C%96%E6%AD%B7%E7%A8%8B-%E8%BD%89%E8%B2%BC-%E6%B7%BA%E6%9E%90-linux-%E5%88%9D%E5%A7%8B%E5%8C%96-init-%E7%B3%BB%E7%B5%B1%EF%BC%8C%E7%AC%AC-3-%E9%83%A8%E5%88%86-systemd/"&gt;init演化歷程 – [轉貼] 淺析 Linux 初始化 init 系統，第 3 部分: Systemd&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;[Unit]&lt;/span&gt;
&lt;span class="na"&gt;Description&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;uWSGI Emperor&lt;/span&gt;
&lt;span class="na"&gt;After&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;syslog.target&lt;/span&gt;

&lt;span class="k"&gt;[Service]&lt;/span&gt;
&lt;span class="na"&gt;ExecStart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;/usr/local/bin/uwsgi --ini /home/ubuntu/blog/deploy_setting/uwsgi.ini&lt;/span&gt;
&lt;span class="c1"&gt;# Requires systemd version 211 or newer&lt;/span&gt;
&lt;span class="na"&gt;RuntimeDirectory&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;uwsgi&lt;/span&gt;
&lt;span class="na"&gt;Restart&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;always&lt;/span&gt;
&lt;span class="na"&gt;KillSignal&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;SIGQUIT&lt;/span&gt;
&lt;span class="na"&gt;Type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;notify&lt;/span&gt;
&lt;span class="na"&gt;StandardError&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;syslog&lt;/span&gt;
&lt;span class="na"&gt;NotifyAccess&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;all&lt;/span&gt;

&lt;span class="k"&gt;[Install]&lt;/span&gt;
&lt;span class="na"&gt;WantedBy&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s"&gt;multi-user.target&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;h1&gt;搬設定檔跟安裝套件&lt;/h1&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;# install package
pip3 install -r /home/ubuntu/blog/requirement.txt

#envirment of django settings
export DJANGO_SETTINGS_MODULE=src.settings.production


# nginx setting file
cp /home/ubuntu/blog/deploy_setting/default /etc/nginx/sites-enabled/default

# create user and collect static file
python3 manage.py createsuperuser
python3 manage.py collectstatic --noinput

# uwsgi setting
cp /home/ubuntu/blog/deploy_setting/emperor.uwsgi.service /etc/systemd/system/emperor.uwsgi.service
systemctl enable emperor.uwsgi.service
systemctl start emperor.uwsgi.service
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;關於deploy還有很多可以優化的部分(CI/CD), 先手動過一次之後大概了解整個部屬的流程，整個流程再慢慢改善紀錄&lt;/p&gt;</content><category term="AWS"></category><category term="deploy"></category><category term="uwsgi"></category><category term="nginx"></category><category term="postgresql"></category></entry></feed>